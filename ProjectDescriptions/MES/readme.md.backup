# Система управления производством. MES КООРДИНАТОР

Проект, созданный для внутренних нужд и потенциальной продажи в качестве коробочного решения.

### Работы, выполненные в рамках проекта

* Разработка архитектуры проекта, состава и функциональных требований к сервисам, определение интерфейсов для работы с проектом как со стороны разработчика, так и рядового пользователя

* Разработка функционала гибкой модели данных, обеспечение высокой степени персонализации функционала  

* Разработка мощного механизма ограничения доступа целиком настраиваемого из модуля администрирования

* Обеспечение механизма запроса данных, позволяющего выполнять поиск по множественным критериям сотням тысяч бизнес-объектов менее чем за 1 секунду

* Обеспечение механизма разграничения доступа, охватывающего любой запрос пользователя но оказывающее минимальное влияние на скорость запросов

* Проектирование дальнейшего пути развития проекта, включая бизнес-процессы

* Проектирование "горячего" внедрения частей системы на место существующих с сохранением бизнес-связей между модулями и существующих данных

* Обеспечение высокой степени тестового покрытия ядра системы

* Разделение системы на "ядро" и вспомогательные части, позволяющие максимально приспособить систему к внутренним нуждам предприятия с сохранением гибкости, необходимой для потенциальной продажи и внедрения на другом предприятии

### Архитектура

К проекту изначально были предъявлены крайне высокие требования:
1. необходимость работы на веб-стеке (было мало опыта разработки)
2. необходимость внедрения частей системы по мере разработки
3. полная обратная совместимость c существующей системой
4. высокая степень гибкости используя PostgreSQL (был навязан паттерн EAV - entity-attribute-value для базы данных)
5. высокая надежность и быстродействие системы с сохранением гибкости
6. фактическая необходимость выполнять все эти требования без команды

Первые несколько месяцев были направлены на разрешение этих вопросов - если решались проблемы со скоростью, они жертвовали гибкостью, гибкость жертвовала скоростью разработки и необходимой квалификацией разработчика. Огромное количество проблем, возникших из-за использования EAV паттерна не позволяли продвигаться с разработкой

Большая часть этих проблем были решены при помощи ручного индексирования - объединения всей информации из ~15 таблиц, составляющих EAV, в единое JSON представление в одной таблице, и ведение дальнейшей работы, опираясь на более ясное представление с понятными запросами и простым индексированием

Каждый бизнес-объект конфигурируем из интерфейса модуля администрирования, внешний вид экранов приведён ниже

![Изображение](./assets/Object_types.View.png)
![Изображение](./assets/Object_types.View.png)

### Ограничение доступа

Для ограничения доступа был разработан функционал, позволяющий ограничивать как просмотр, так и редактирование любого объекта по любому его признаку или признаку связанного с ним объекта 

Например, есть справочник сотрудников, каждый из сотрудников работает в каком-то подразделении. В системе можно обеспечить права на просмотр только пользователей и цеха 48, редактирование только тех пользователей из этого цеха, которые были устроены на предприятие ранее 2022 года.

И всё это без написания и строки кода, на скриншоте ниже внешний вид интерфейса
![Изображение](./assets/Configurator.Roles.Rights.PNG)

### API

Следующей проблемой являлась работа с данными - были необходимы понятные интерфейсы для работы с данными - запросы, фильтрация и эти интерфейсы должны быть универсальными для обеспечения гибкости системы даже при отсутствии доступа к исходному коду 

В ядре системы был разработан API как для просмотра, так и для изменения данных с учетом связей между объектами, полным сохранением версий при каждом изменении, полным соответствованием ACID требованиям при множественном изменении данных,  возможность валидации каждой характеристики объекта и всё это с полным учётом прав пользователя 



