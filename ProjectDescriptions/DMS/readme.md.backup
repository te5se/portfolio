# Система электронного документооборота МАЯК

Мой первый действительно большой и сложный проект, кодовая база которого насчитывает суммарно более 300 тысяч строк. 

### Архитектура

Проект выполнение в качестве настольного приложения с прямым подключением к базе данных. Монолит.

Разграничение доступа осуществляется при помощи авторизации в Oracle. 

Клиент разработан на Avaloni-и, С#. База данных - Oracle

Недостатки от огромного размера проекта сдерживаются плагинами, подгружаемыми в рантайме. 

Задачи логгирования и разграничения доступа решаются созданием отдельного объекта - операции, без которой никакое действие в проекта не является возможным. Открытие сообщения в окне - операций, просмотр файла, операция. Подключение к БД - операция. И права выделяются на операцию для каждого пользователя.



### Работы, выполненные в рамках проектах

Здесь пришлось столкнуться со всеми сложностями больших и нагруженных проектов:  

* Оптимизация скорости отклика (10сек -> ~0.5 сек)
* Оптимизация SQL запросов (с учётами кастомных фильтров и ограничений доступа для каждого пользователя)
* Исправление многочисленных утечек памяти
* Оптимизация механизма логгирования (история действий перед ошибкой)
* Глубокая кастомизация опыта для каждого пользователя (колонки таблиц, их порядок, сортировка, папки сообщений, шрифты и стандартные промежутки между объекта)
* Сервис на основе машинного обучения, выступающий как персональный помошник
* Разработка фреймворка для e2e тестирования
* Разработка функционала быстрого просмотра (основные механизм в проекте завязаны на новые окна - это просмотр форм в формах без открытия нового окна)
* Быстрый просмотр файлов (.pdf, .docx, images)
* Создание кастомной обертки окна

### Качество проекта

Именно на этом проекте я понял, почему необходимы тесты и документация на проектах. На определённом уровне масштаба и сложности проект начинает рассыпаться как сам по себе, так и при внесении любых изменений. 

Без фиксации функционала в документации и автоматизированных тестах проект начинает обваливаться как угольная шахта, в которой забыли про подпорки. 

То же самое произошло и с этих проектом - после внедрения начинали регулярно вылетать глупые баги - не открывались сообщения из-за null Exception-ов. Неверно отрабатывали компоненты, которые были общими для всех форм из-за небольших изменений. 

Причём эти баги были легко исправляемыми - просто пройтись по всему проекту и открыть несколько форм, проверить, что там нужные значения уже поправило бы 3/4 от всех ошибок. Для этого я написал локальный фреймворк, который существующую архитектуру проекта для совершения действия - открытия окон, ввода сообщений и т.д. Прекрасно работало, но на тот момент нашей команде разработки просто было неинтересно писать софт - можно было просто ничего не менять и перечитывать по 10 раз каждый merge request.

### Местонахождение бизнес логики

Один и больших недостатков проекта было то, что его старый клиент отработал около 20 лет, обрастая всё новым недокументированным функционалом, подавляющая часть которого реализовывалась на стороне базы данных. 

Бизнес логика на стороне БД, как выяснилось, крайне тяжело пишется, организуется по смыслу, тестируется и масштабируется

### Внешний вид

Я старался сделать многие вещи для того, чтобы улучшить внешний вид проекта, но работа с таким инструментом как Avalonia крайне усложняет стилизацию

Например, для этой анимации, раскрывающей панель для редактирования соотношений сторон было написано около 300 строк кода, потому что местные keyframe-ы работают криво, как и местные transition-ы. Для устранения прыжков и скачков необходимо было использовать оба, в html+css можно было бы сделать то же самое в 3 строках

*пример окна с быстрым просмотром файлов и сообщения*

Кастомизация стилей стандартных компонентов была возможна только при копировании стиля компонента из исходников и внесении изменений в копию. Возможность инспекции разметки появилась только в более поздних версиях и по сравнению с браузером была довольно слабой

*пример модернизированного скролла*

Даже такая рядовая для WPF операция, как кастомизация окна была недоступна здесь, необходимо было писать новый компонент,  полностью замещающий внешний вид стандартного окна

*пример старой/новой разметки*