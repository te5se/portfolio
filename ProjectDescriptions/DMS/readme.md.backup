# Система электронного документооборота МАЯК

Мой первый действительно большой и сложный проект, кодовая база которого насчитывает суммарно более 300 тысяч строк. 

### Архитектура

Проект выполнен в качестве настольного приложения с прямым подключением к базе данных. Монолит.

Разграничение доступа осуществляется при помощи авторизации доменных пользователей в Oracle. 

Клиент разработан на Avalonia, С#. База данных - Oracle.

Проблемы от огромного размера проекта сдерживаются плагинами, подгружаемыми в рантайме. 

Задачи логгирования и разграничения доступа решаются созданием отдельного объекта - операции, без которой никакое действие в приложении не является возможным. Открытие сообщения в окне - операция, просмотр файла - операция, подключение к БД - операция. И права выделяются на каждую операцию для каждого пользователя.



### Работы, выполненные в рамках проектах

Здесь пришлось столкнуться со всеми сложностями сложных, нагруженных проектов:  

* Оптимизация средней скорости отклика (5сек -> ~0.5 сек)
* Оптимизация SQL запросов (с учётами кастомных фильтров и ограничений доступа для каждого пользователя)
* Исправление многочисленных утечек памяти
* Оптимизация механизма логгирования (история действий пользователя перед ошибкой)
* Глубокая кастомизация опыта для каждого пользователя (колонки таблиц, их порядок, сортировка, папки сообщений, шрифты и стандартные промежутки между полями ввода)
* Сервис на основе машинного обучения, выступающий в качестве персонального помощника
* Разработка фреймворка для e2e тестирования
* Разработка функционала быстрого просмотра (проект изначально был завязан под работу в рекурсивных окнах, была сделана работа с формами без открытия нового окна)
* Быстрый просмотр файлов (.pdf, .docx, images)
* Создание кастомной обертки окна

### Качество проекта

Именно на этом проекте я понял, почему необходимы тесты и документация на проектах. На определённом уровне масштаба и сложности и без фиксации функционала в документации и автоматизированных тестах проект начинает обваливаться как угольная шахта, в которой забыли про подпорки. 

То же самое произошло и с этим проектом - после внедрения начинали регулярно вылетать глупые баги - не открывались сообщения из-за null Exception-ов. Неверно отрабатывали компоненты, которые были общими для всех форм из-за небольших изменений. 

Причём эти баги были легко исправляемыми - просто пройтись по приложению и открыть несколько форм, проверить, что там нужные значения, уже поправило бы 3/4 от всех ошибок. Для этого я написал локальный фреймворк, который существующую архитектуру проекта для совершения действия - открытия окон, ввода сообщений и т.д. Прекрасно работало, но, к сожалению, нашей команде разработки просто было неинтересно писать тесты если можно просто разрабатывать в несколько раз ~медленнее~ надежнее.

### Местонахождение бизнес логики

Одним из больших недостатков проекта было то, что его старый клиент отработал около 20 лет, обрастая новым, недокументированным функционалом, подавляющая часть которого реализовывалась на стороне базы данных. 

Бизнес логика на стороне БД, как выяснилось, крайне тяжело пишется, организуется по смыслу, тестируется и масштабируется.

### Внешний вид

Главное окно приложения
![Изображение](./assets/bottom-quickview.PNG)

Я старался улучшить внешний вид проекта с некоторым успехом, но работа с таким инструментом как Avalonia крайне усложняет стилизацию.

Например, для этой анимации, раскрывающей панель для редактирования соотношения сторон двух форм было написано около 300 строк кода, потому что местные keyframe-ы работают криво, как и местные transition-ы. Для устранения прыжков и скачков необходимо было использовать оба инструмента, в html+css можно было бы сделать то же самое в 3 строках.

Кастомизация стилей стандартных компонентов была возможна только при копировании стиля компонента из исходников и внесении изменений в копию. Возможность инспекции разметки появилась только в более поздних версиях и по сравнению с браузером была довольно слабой.

Даже такая рядовая для WPF операция, как кастомизация окна была недоступна здесь, необходимо было писать новый компонент, полностью замещающий внешний вид стандартного окна.

Ниже приведён внешнего вида главного окна до и после
![Изображение](./assets/design-comparison.png)

Окно общих настроек
![Изображение](./assets/settings.png)

Окно заведения документа
![Изображение](./assets/document-view.PNG)
